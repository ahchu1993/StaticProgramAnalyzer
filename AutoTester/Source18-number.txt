procedure Alpha {
u = 1; //1
v = 2; //2
w = u; //3
w = u + v; //4
uv1=u+v; //5
uv2= u + v; //6
uv3 = u+ v; //7
uv4 =u + v; //8
uv5 = u +v; //9
uuv = u + u + v; //10
BIGUV = u + v; //11
wide           =           u          +             v; //12
veryWide 			= 		u 					+ 								v; //13
broken
=
u
+
v
; //14
veryBroken

=







u







+


v







; //15

wideBroken			=
		u
				+
									v
+
		w
																		; //16

clone = w+w+w+w+w+w+w+w+w+w+w+w+w+w+w+w+w+w+w+w+w+w+w+w+w+w+w+w+w+w+w; //17

num123num = 9999 + 0; //18

mix = u + 1 + v + 2 + w + 3; //19

}

procedure Alpha2 { x = 1; //20
y = 2; //21
				z = 3; //22
							xyz=x+y+z; //23
x1 = x + 1 + 9019203812;} //24

procedure Beta {
day = 0; //25
while tomorrowNeverComes { day = day + 1; } //26,27

var1able = 0; //28

while a{ //29
	var1able = var1able + 1; //30
	while b{ //31
		var1able = var1able + 1; //32
		while c{ //33
			var1able = var1able + 1; //34
			while d{ //35
				var1able = var1able + 1; //36
				while e{ //37
					var1able = var1able + 1; //38
					while f{ //39
						var1able = var1able + 1; //40
						while g{ //41
							var1able = var1able + 1; //42
							while h{  //43
								var1able = var1able + 1; //44
							}
						}
					}
				}
			}			
		}
	}
}
						
while BREAK1 { //45







	while BREAK2 { //46
		
		
		
		
		while BREAK3 {			//47
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			lol = 0;   //48
			
			
			
			
			
			
			
			
			
			
			
			
		
		}
		
		
		
	}
}

}

procedure betaTwo {
	beta = 0; //49
}

procedure Gamma {
long =  1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1;
//50
}

procedure Delta {
	r=x; //51
	s=     y; //52
	t         =         z; //53
}
