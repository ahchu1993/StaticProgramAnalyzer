188
cat: All Category
1 - Calls, Typed :: Calls(_,_)
procedure p1;
Select p1 such that Calls(_,_)
Example,p,q
5000
2 - Calls, Typed :: Calls(INTEGER,INTEGER)
procedure p1;
Select BOOLEAN such that Calls(0,2)
false
5000
3 - Calls, Typed :: Calls(INTEGER,_)
call c;
Select c.stmt# such that Calls(2,_)
none
5000
4 - Calls, Typed :: Calls(_,INTEGER)
call c;
Select c.stmt# such that Calls(_,"p")
10,12,16
5000
5 - Calls, Typed :: Calls(INTEGER,IDENT)
call c;
Select BOOLEAN such that Calls(2,"q")
false
5000
6 - Calls, Typed :: Calls(IDENT,INTEGER)
call c;
Select BOOLEAN such that Calls("Example",1)
false
5000
7 - Calls, Typed :: Calls(SYNONYM,INTEGER)
procedure p;
Select p such that Calls(p,1)
none
5000
8 - Calls, Typed :: Calls(INTEGER,SYNONYM)
procedure p;
Select p such that Calls(2,p)
none
5000
9 - Calls, Typed :: Calls(SYNONYM,SYNONYM)
procedure p1,p2;
Select p1 such that Calls(p1,p2)
Example,p
5000
10 - Calls, Typed :: Calls(SYNONYM,_)
procedure p1;
Select BOOLEAN such that Calls(p1,_)
true
5000
11 - Calls, Typed :: Calls(_,SYNONYM)
procedure p1;
Select BOOLEAN such that Calls(_,p1)
true
5000
12 - Calls, Typed :: Calls(IDENT,_)
procedure p1;
Select BOOLEAN such that Calls("Example",_)
true
5000
13 - Calls, Typed :: Calls(_,IDENT)
procedure p;
Select p such that Calls(_,"p")
Example, p, q
5000
14 - Calls, Typed :: Calls(IDENT,SYNONYM)
procedure p;
Select p such that Calls("Example",p)
p,q
5000
15 - Calls, Typed :: Calls(SYNONYM,IDENT)
procedure p;
Select p such that Calls(p,"Example")
none
5000
16 - Calls, Typed :: Calls(IDENT,IDENT)
procedure p;
Select BOOLEAN such that Calls("p","Example")
false
5000
17 - Calls, Typed :: multiple chain of Calls
procedure p1, p2, p3;
Select p2 such that Calls(p1,p2) and Calls(p2,p3)
p
5000
18 - Calls*, Typed :: Calls*(_,_) same as Calls
procedure p1;
Select p1 such that Calls*(_,_)
Example,p,q
5000
19 - Calls*, Typed :: Calls*(INTEGER,INTEGER)
procedure p1;
Select BOOLEAN such that Calls*(0,2)
false
5000
20 - Calls*, Typed :: Calls*(INTEGER,_) same as Calls
call c;
Select c.stmt# such that Calls*(2,_)
none
5000
21 - Calls*, Typed :: Calls*(_,INTEGER) same as Calls
call c;
Select c.stmt# such that Calls*(_,"q")
10,12,16
5000
22 - Calls*, Typed :: Calls*(INTEGER,IDENT)
call c;
Select BOOLEAN such that Calls*(2,"q")
false
5000
23 - Calls*, Typed :: Calls*(IDENT,INTEGER)
call c;
Select BOOLEAN such that Calls*("Example",1)
false
5000
24 - Calls*, Typed :: Calls*(SYNONYM,INTEGER)
procedure p;
Select p such that Calls*(p,1)
none
5000
25 - Calls*, Typed :: Calls*(INTEGER,SYNONYM)
procedure p;
Select p such that Calls*(2,p)
none
5000
26 - Calls*, Typed :: Calls*(SYNONYM,SYNONYM)
procedure p1,p2;
Select p1 such that Calls*(p1,p2)
Example,p
5000
27 - Calls*, Typed :: Calls*(SYNONYM,_)
procedure p1;
Select BOOLEAN such that Calls*(p1,_)
true
5000
28 - Calls*, Typed :: Calls*(_,SYNONYM)
procedure p1;
Select BOOLEAN such that Calls*(_,p1)
true
5000
29 - Calls*, Typed :: Calls*(IDENT,_)
procedure p1;
Select BOOLEAN such that Calls*("Example",_)
true
5000
30 - Calls*, Typed :: Calls*(_,IDENT)
procedure p;
Select p such that Calls*(_,"q")
Example,p,q
5000
31 - Calls*, Typed :: Calls*(IDENT,SYNONYM)
procedure p;
Select p such that Calls*("Example",p)
p,q
5000
32 - Calls*, Typed :: Calls*(SYNONYM,IDENT)
procedure p;
Select p such that Calls*(p,"q")
Example,p
5000
33 - Calls*, Typed :: Calls*(IDENT,IDENT)
procedure p;
Select BOOLEAN such that Calls*("p","Example")
false
5000
34 - Calls*, Typed :: multiple chain of Calls*
procedure p1, p2, p3;
Select p2 such that Calls*(p1,p2) and Calls*(p2,p3)
p
5000
35 - Modifies, Typed :: Modifies(INTEGER,_)
variable v;
Select v such that Modifies(11,_)
x,z,i,y
5000
36 - Modifies, Typed :: Modifies(INTEGER,_)
stmt s;
Select BOOLEAN such that Modifies(10,_)
true
5000
37 - Modifies, Typed :: Modifies(INTEGER,_)
stmt s;
Select BOOLEAN such that Modifies(14,_)
true
5000
38 - Modifies, Typed :: Modifies(INTEGER,IDENT)
stmt s;
Select BOOLEAN such that Modifies(13,"y")
false
5000
39 - Modifies, Typed :: Modifies(INTEGER,SYNONYM)
variable v;
Select v such that Modifies(6,v)
z,y
5000
40 - Modifies, Typed :: Modifies(INTEGER,SYNONYM)
variable v;
Select v such that Modifies(12,v)
z,x, i
5000
42 - Modifies, Typed :: Modifies(SYNONYM,IDENT)
procedure p;
Select p such that Modifies(p,"y")
Example
5000
43 - Modifies, Typed :: Modifies(SYNONYM,_)
call c; variable v;
Select c such that Modifies(c,v)
10,12,16
5000
44 - Modifies, Typed :: Modifies(SYNONYM,_)
procedure p;
Select BOOLEAN such that Modifies(p,_)
true
5000
45 - Modifies, Typed :: Modifies(SYNONYM,SYNONYM)
stmt s; variable v;
Select s such that Modifies(s,v)
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24
5000
46 - Modifies, Typed :: Modifies(SYNONYM,SYNONYM)
procedure p; variable v;
Select p such that Modifies(p,v)
Example,p,q
5000
47 - Modifies, Typed :: Modifies(IDENT,SYNONYM)
variable v;
Select v such that Modifies("p",v)
x,z,i
5000
48 - Modifies, Typed :: Modifies(IDENT,_)
procedure c;
Select c such that Modifies("q",_)
q,p, Example
5000
49 - Modifies, Typed :: Modifies(IDENT,IDENT)
prog_line n;
Select n such that Modifies("q","x")
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24
5000
50 - Uses, Typed :: Uses(INTEGER,_)
while w;
Select w such that Uses(20,_)
none
5000
51 - Uses, Typed :: Uses(INTEGER,_)
while w;
Select BOOLEAN such that Uses(4,_)
true
5000
52 - Uses, Typed :: Uses(INTEGER,_)
while w;
Select BOOLEAN such that Uses(10,_)
true
5000
53 - Uses, Typed :: Uses(INTEGER,IDENT)
variable v;
Select BOOLEAN such that Uses(22,"x")
true
5000
54 - Uses, Typed :: Uses(INTEGER,SYNONYM)
variable v;
Select v such that Uses(10,v)
x,z
5000
55 - Uses, Typed :: Uses(INTEGER,SYNONYM)
variable v;
Select v such that Uses(17,v)
i
5000
56 - Uses, Typed :: Uses(INTEGER,SYNONYM)
variable v;
Select v such that Uses(12,v)
x,z,y,i
5000
58 - Uses, Typed :: Uses(SYNONYM,IDENT)
call c;
Select c such that Uses(c,"z")
10,12,16
5000
59 - Uses, Typed :: Uses(SYNONYM,IDENT)
stmt s;
Select s such that Uses(s,"y")
12,13,14,15
5000
60 - Uses, Typed :: Uses(SYNONYM,IDENT)
procedure p;
Select p such that Uses(p,"y")
p, Example
5000
61 - Uses, Typed :: Uses(SYNONYM,_)
procedure c;
Select c.procName such that Uses(c,_)
p,q, Example
5000
62 - Uses, Typed :: Uses(SYNONYM,_)
procedure p;
Select p such that Uses(p,_)
Example,p,q
5000
63 - Uses, Typed :: Uses(SYNONYM,SYNONYM)
stmt s; variable v;
Select BOOLEAN such that Uses(s,v)
true
5000
64 - Uses, Typed :: Uses(SYNONYM,SYNONYM)
procedure p; variable v;
Select BOOLEAN such that Uses(p,v)
true
5000
65 - Uses, Typed :: Uses(IDENT,SYNONYM)
variable v;
Select v such that Uses("q",v)
x,z
5000
66 - Uses, Typed :: Uses(IDENT,_)
variable v;
Select BOOLEAN such that Uses("q",_)
true
5000
67 - Uses, Typed :: USES(IDENT,IDENT)
procedure p;
Select BOOLEAN such that Uses("Example","y")
true
5000
68 - Parent, Typed :: Parent(_,_)
stmtLst sL;
Select sL such that Parent(_,_)
1,5,7,8,13,14,15,20,22,23,24
5000
69 - Parent, Typed :: Parent(INTEGER,INTEGER)
if i;
Select BOOLEAN such that Parent(4,7)
false
5000
70 - Parent, Typed :: Parent(_,INTEGER)
if i;
Select i such that Parent(_,17)
6,13,22
5000
71 - Parent, Typed :: Parent(INTEGER,_)
if i;
Select BOOLEAN such that Parent(6,_)
true
5000
72 - Parent, Typed :: Parent(SYNONYM,INTEGER)
assign a;
Select a such that Parent(a,17)
none
5000
73 - Parent, Typed :: Parent(INTEGER,SYNONYM)
call c;
Select c such that Parent(13,c)
none
5000
74 - Parent, Typed :: Parent(SYNONYM,_)
if i;
Select i such that Parent(i,_)
6,13,22
5000
75 - Parent, Typed :: Parent(_,SYNONYM)
while w;
Select w such that Parent(_,w)
14
5000
76 - Parent, Typed :: Parent(SYNONYM,SYNONYM)
while w; assign a;
Select a such that Parent(w,a)
5,9,11,15,17
5000
77 - Parent*, Typed :: Parent*(_,_) same as Parent
stmtLst sL;
Select sL such that Parent*(_,_)
1,5,7,8,13,14,15,20,22,23,24
5000
78 - Parent*, Typed :: Parent*(INTEGER,INTEGER)
if i;
Select BOOLEAN such that Parent*(4,7)
true
5000
79 - Parent*, Typed :: Parent*(_,INTEGER) same as Parent
if i;
Select i such that Parent*(_,17)
6,13,22
5000
80 - Parent*, Typed :: Parent*(INTEGER,_) same as Parent
if i;
Select BOOLEAN such that Parent(6,_)
true
5000
81 - Parent*, Typed :: Parent*(SYNONYM,INTEGER)
assign a;
Select a such that Parent*(a,17)
none
5000
82 - Parent*, Typed :: Parent*(INTEGER,SYNONYM)
call c;
Select c such that Parent*(13,c)
16
5000
83 - Parent*, Typed :: Parent*(SYNONYM,_) same as Parent
if i;
Select i such that Parent*(i,_)
6,13,22
5000
84 - Parent*, Typed :: Parent*(_,SYNONYM) same as Parent
while w;
Select w such that Parent*(_,w)
14
5000
85 - Parent*, Typed :: Parent*(SYNONYM,SYNONYM)
while w; assign a;
Select a such that Parent*(w,a)
5,7,8,9,11,15,17
5000
86 - Follows, Typed :: Follows(_,_)
assign a;
Select BOOLEAN such that Follows(_,_)
true
5000
87 - Follows, Typed :: Follows(INTEGER,INTEGER)
assign a;
Select BOOLEAN such that Follows(7,8)
false
5000
88 - Follows, Typed :: Follows(INTEGER,_)
assign a;
Select BOOLEAN such that Follows(21,_)
false
5000
89 - Follows, Typed :: Follows(_,INTEGER)
assign a;
Select BOOLEAN such that Follows(_,24)
false
5000
90 - Follows, Typed :: Follows(SYNONYM,_)
while w;
Select w such that Follows(w,_)
4,14
5000
91 - Follows, Typed :: Follows(_,SYNOYNM)
assign a;
Select a such that Follows(_,a)
2,3,9,11,17,18,19,21,
5000
92 - Follows, Typed :: Follows(INTEGER,SYNOYNM)
if i;
Select i such that Follows(5,i)
6
5000
93 - Follows, Typed :: Follows(SYNONYM,INTEGER)
if i;
Select i such that Follows(i,14)
none
5000
94 - Follows, Typed :: Follows(SYNONYM,SYNONYM)
assign a; stmt s;
Select a such that Follows(a,s)
1,2,3,5,9,15,18
5000
95 - Follows*, Typed :: Follows*(_,_) same as Follows
assign a;
Select BOOLEAN such that Follows*(_,_)
true
5000
96 - Follows*, Typed :: Follows*(INTEGER,INTEGER)
assign a;
Select BOOLEAN such that Follows*(2,4)
true
5000
97 - Follows*, Typed :: Follows*(INTEGER,_) same as Follows
assign a;
Select BOOLEAN such that Follows*(21,_)
false
5000
98 - Follows*, Typed :: Follows*(_,INTEGER) same as Follows
assign a;
Select BOOLEAN such that Follows*(_,24)
false
5000
99 - Follows*, Typed :: Follows*(SYNONYM,_) same as Follows
while w;
Select w such that Follows*(w,_)
4,14
5000
100 - Follows*, Typed :: Follows*(_,SYNOYNM) same as Follows
assign a;
Select a such that Follows*(_,a)
2,3,9,11,17,18,19,21,
5000
101 - Follows*, Typed :: Follows*(INTEGER,SYNOYNM)
assign a;
Select a such that Follows*(5,a)
9,11
5000
102 - Follows*, Typed :: Follows*(SYNONYM,INTEGER)
stmt s;
Select s such that Follows*(s,19)
14,18
5000
103 - Follows*, Typed :: Follows*(SYNONYM,SYNONYM)
assign a; stmt s;
Select a such that Follows*(a,s)
1,2,3,5,9,15,18
5000
104 - Next, Typed :: Next(_,_)
stmtLst s;
Select s such that Next(_,_)
1,13,14,15,20,22,23,24,5,7,8
5000
105 - Next, Typed :: Next(INTEGER,_)
stmtLst s;
Select BOOLEAN such that Next(23,_)
false
5000
106 - Next, Typed :: Next(_,INTEGER)
stmtLst s;
Select BOOLEAN such that Next(_,19)
true
5000
107 - Next, Typed :: Next(SYNONYM,_)
stmt s;
Select s such that Next(s,_)
1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,22
5000
110 - Next, Typed :: Next(SYNONYM,INTEGER)
stmt s;
Select s such that Next(s,19)
18
5000
111 - Next, Typed :: Next(SYNONYM,SYNONYM)
call c; assign a;
Select c.procName such that Next(c,a)
q
5000
112 - Next*, Typed :: Next*(_,_) same as Next
stmtLst s;
Select s such that Next*(_,_)
1,5,7,8,13,14,15,20,22,23,24
5000
113 - Next*, Typed :: Next*(INTEGER,_) same as Next
stmtLst s;
Select BOOLEAN such that Next*(23,_)
false
5000
114 - Next*, Typed :: Next*(_,INTEGER) same as Next
stmtLst s;
Select BOOLEAN such that Next*(_,19)
true
5000
115 - Next*, Typed :: Next*(SYNONYM,_) same as Next
stmt s;
Select s such that Next*(s,_)
1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,22
5000
118 - Next*, Typed :: Next*(SYNONYM,INTEGER)
stmt s;
Select s such that Next*(s,19)
13,14,15,16,17,18
5000
119 - Next*, Typed :: Next*(SYNONYM,SYNONYM)
while w; assign a;
Select a such that Next*(w,a)
5,7,8,9,11,15,17,18,19,21
5000
120 - Pattern, Typed :: assign(_,_)
assign a;
Select a pattern a(_,_)
1,2,3,5,7,8,9,11,15,17,18,19,20,21,23,24
5000
121 - Pattern, Typed :: assign(_,EXPR)
assign a;
Select a pattern a(_,"x+1")
7,18,23
5000
122 - Pattern, Typed :: assign(_,_EXPR_)
assign a;
Select a pattern a(_,_"z+x"_)
8,9,21,24
5000
123 - Pattern, Typed :: assign(_,_EXPR_)
assign a;
Select a pattern a(_,_"2*y"_)
15
5000
124 - Pattern, Typed :: assign(SYNONYM,_)
assign a; variable v;
Select v pattern a(v,_)
x,y,z,i
5000
125 - Pattern, Typed :: assign(SYNONYM,EXPR)
assign a; variable v;
Select v pattern a(v,"x+1")
x,z
5000
126 - Pattern, Typed :: assign(SYNONYM,_EXPR_)
assign a; variable v;
Select v pattern a(v,_"z+x"_)
x,y,z
5000
127 - Pattern, Typed :: assign(IDENT,_)
assign a;
Select a pattern a("x",_)
1,5,15,18,24
5000
128 - Pattern, Typed :: assign(IDENT,EXPR)
assign a;
Select a pattern a("x","i-1")
none
5000
129 - Pattern, Typed :: assign(IDENT,_EXPR_)
assign a;
Select a pattern a("z",_"z+x"_)
9,21
5000
130 - Pattern, Typed :: while(_,_)
while w;
Select BOOLEAN pattern w(_,_)
true
5000
131 - Pattern, Typed :: while(SYNONYM,_)
while w; variable v;
Select v pattern w(v,_)
i
5000
132 - Pattern, Typed :: while(IDENT,_)
while w;
Select w pattern w("x",_)
none
5000
133 - Pattern, Typed :: if(_,_,_)
if i;
Select i pattern i(_,_,_)
6,13,22
5000
134 - Pattern, Typed :: if(SYNONYM,_,_)
if i; variable v;
Select v pattern i(v,_,_)
x
5000
135 - Pattern, Typed :: if(IDENT,_,_)
if i;
Select BOOLEAN pattern i("y",_,_)
false
5000
136 - With, Typed :: assign.stmt# = INTEGER
assign a;
Select BOOLEAN with a.stmt# = 4
false
5000
137 - With, Typed :: assign.stmt# = assign2.stmt#
assign a1,a2;
Select BOOLEAN with a1.stmt# = a2.stmt#
true
5000
138 - With, Typed :: assign1.stmt# = stmt.stmt#
assign a; stmt s;
Select s with a.stmt# = s.stmt#
1,2,3,5,7,8,9,11,15,17,18,19,20,21,23,24
5000
139 - With, Typed :: assign.stmt# = while.stmt#
assign a; while w;
Select w with a.stmt# = w.stmt#
none
5000
140 - With, Typed :: assign.stmt# = if.stmt#
assign a; if i;
Select i with a.stmt# = i.stmt#
none
5000
141 - With, Typed :: assign.stmt# = calls.stmt#
assign a; call c;
Select BOOLEAN with a.stmt# = c.stmt#
false
5000
142 - With, Typed :: assign.stmt# = constant.value
assign a; constant c;
Select c with a.stmt# = c.value
1,2,3
5000
143 - With, Typed :: while.stmt# = INTEGER
while w;
Select w with w.stmt# = 4
4
5000
144 - With, Typed :: while1.stmt# = while2.stmt#
while w1,w2;
Select w1 with w1.stmt# = w2.stmt#
4,14
5000
145 - With, Typed :: while.stmt# = stmt.stmt#
while w; stmt s;
Select w with w.stmt# = s.stmt#
4,14
5000
146 - With, Typed :: while.stmt# = assign.stmt#
while w; assign a;
Select a with w.stmt# = a.stmt#
none
5000
147 - With, Typed :: while.stmt# = if.stmt#
while w; if i;
Select BOOLEAN with w.stmt# = i.stmt#
false
5000
148 - With, Typed :: while.stmt# = calls.stmt#
while w; call c;
Select BOOLEAN with w.stmt# = c.stmt#
false
5000
149 - With, Typed :: while.stmt# = constant.value
while w; constant c;
Select c with w.stmt# = c.value
none
5000
150 - With, Typed :: if.stmt# = INTEGER
if i;
Select BOOLEAN with i.stmt# = 22
true
5000
151 - With, Typed :: if1.stmt# = if2.stmt#
if i1,i2;
Select i1 with i1.stmt# = i2.stmt#
6,13,22
5000
152 - With, Typed :: if.stmt# = stmt.stmt#
if i; stmt s;
Select s with i.stmt# = s.stmt#
6,13,22
5000
153 - With, Typed :: if.stmt# = assign.stmt#
if i; assign a;
Select BOOLEAN with i.stmt# = a.stmt#
false
5000
154 - With, Typed :: if.stmt# = while.stmt#
if i; while w;
Select w with i.stmt# = w.stmt#
none
5000
155 - With, Typed :: if.stmt# = calls.stmt#
if i; call c;
Select BOOLEAN with i.stmt# = c.stmt#
false
5000
156 - With, Typed :: if.stmt# = constant.value
if i; constant c;
Select c with i.stmt# = c.value
13
5000
157 - With, Typed :: calls.stmt# = INTEGER
call c;
Select c with c.stmt# = 10
10
5000
158 - With, Typed :: calls1.stmt# = calls2.stmt#
call c1,c2;
Select BOOLEAN with c1.stmt# = c2.stmt#
true
5000
159 - With, Typed :: calls.stmt# = stmt.stmt#
call c; stmt s;
Select s with c.stmt# = s.stmt#
10,12,16
5000
160 - With, Typed :: calls.stmt# = assign.stmt#
call c; assign a;
Select BOOLEAN with c.stmt# = a.stmt#
false
5000
161 - With, Typed :: calls.stmt# = while.stmt#
call c; while w;
Select w with c.stmt# = w.stmt#
none
5000
162 - With, Typed :: calls.stmt# = if.stmt#
if i; call c;
Select BOOLEAN with c.stmt# = i.stmt#
false
5000
163 - With, Typed :: calls.stmt# = constant.value
call ca; constant c;
Select ca.procName with ca.stmt# = c.value
q
5000
164 - With, Typed :: stmt.stmt# = INTEGER
stmt s;
Select s with s.stmt# = 20
20
5000
165 - With, Typed :: stmt.stmt# = stmt.stmt#
stmt s;
Select BOOLEAN with s.stmt# = s.stmt#
true
5000
166 - With, Typed :: stmt.stmt# = assign.stmt#
stmt s; assign a;
Select s with s.stmt# = a.stmt#
1,2,3,5,7,8,9,11,15,17,18,19,20,21,23,24
5000
165 - With, Typed :: stmt.stmt# = while.stmt#
stmt s; while w;
Select BOOLEAN with s.stmt# = w.stmt#
true
5000
166 - With, Typed :: stmt.stmt# = if.stmt#
stmt s; if i;
Select i with s.stmt# = i.stmt#
6,13,22
5000
167 - With, Typed :: stmt.stmt# = calls.stmt#
stmt s; call c;
Select c.procName with s.stmt# = c.stmt#
p,q
5000
168 - With, Typed :: stmt.stmt# = constant.value
stmt s; constant c;
Select s with s.stmt# = c.value
1,2,3,10,13
5000
169 - With, Typed :: variable.varName = IDENT
variable v;
Select v with v.varName = "abc"
none
5000
170 - With, Typed :: variable1.varName = variable2.varName
variable v1, v2;
Select BOOLEAN with v1.varName = v2.varName
true
5000
171 - With, Typed :: variable.varName = procedure.procName
variable v; procedure p;
Select p with v.varName = p.procName
none
5000
172 - With, Typed :: variable.varName = calls.procName
variable v; call c;
Select c with v.varName = c.procName
none
5000
173 - With, Typed :: procedure.procName = IDENT
procedure p;
Select p with p.procName = "p"
p
5000
174 - With, Typed :: procedure1.procName = procedure2.procName
procedure p1,p2;
Select p1 with p1.procName = p2.procName
Example,p,q
5000
175 - With, Typed :: procedure.procName = variable.varName
procedure p; variable v;
Select BOOLEAN with p.procName = v.varName
false
5000
176 - With, Typed :: procedure.procName = calls.procName
procedure p; call c;
Select p with p.procName = c.procName
p,q
5000
177 - With, Typed :: calls.procName = IDENT
call c;
Select BOOLEAN with c.procName = "Example"
false
5000
178 - With, Typed :: calls1.procName = calls2.procName
procedure p; call c1,c2;
Select p with c1.procName = c2.procName
Example,p,q
5000
179 - With, Typed :: calls.procName = variable.varName
call c; variable v;
Select v with c.procName = v.varName
none
5000
180 - With, Typed :: calls.procName = procedure.procName
call c; procedure p;
Select c with c.procName = p.procName
10,12,16
5000
181 - With, Typed :: prog_line = INTEGER
prog_line n;
Select n with n = 25
none
5000
182 - With, Typed :: prog_line = stmt.stmt#
prog_line n; stmt s;
Select n with n = s.stmt#
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24
5000
183 - With, Typed :: prog_line = assign.stmt#
prog_line n; assign a;
Select n with n = a.stmt#
1,2,3,5,7,8,9,11,15,17,18,19,20,21,23,24
5000
184 - With, Typed :: prog_line = while.stmt#
prog_line n; while w;
Select n with n = w.stmt#
4,14
5000
185 - With, Typed :: prog_line = if.stmt#
prog_line n; if q;
Select n with n = q.stmt#
6,13,22
5000
186 - With, Typed :: prog_line = calls.stmt#
prog_line n; call c;
Select n with n = c.stmt#
10,12,16
5000
187 - With, Typed :: prog_line = constant.value
prog_line n; constant c;
Select n with n = c.value
1,2,3,10,13
5000
188 - with, Typed :: calls.stmt# = prog_line
prog_line n; call c;
Select c with c.stmt# = n
10,12,16
5000
189 - Follows*, Typed :: Follows*(INTEGER,INTEGER)
stmt s;
Select BOOLEAN such that Follows*(18,19)
true
5000
cat: All Category
1 - MultipleClauses, Typed :: Modifies and Uses
variable v; stmt s;
Select s such that Modifies("Example",v) and Uses(s,v) and Modifies(s,v)
4,5,6,9,10,11,12,13,14,16,17,18,19,21,22,24
5000
2 - MultipleClauses, Typed :: Next* and Parent*
if i; assign a;
Select a such that Parent*(i,a) and Next*(a, 20)
none
5000
3 - MultipleClauses, Typed :: Parent*
stmt s1, s2, s3;
Select s2 such that Parent*(s1,s2) and Parent*(s2, s3)
6,14,
5000
4 - MultipleClauses, Typed :: Follows* and Next*
stmtLst sL, stmt s;
Select sL such that Follows*(s,sL) and Next*(1, s)
none
5000
5 - MultipleClauses, Typed :: Calls and Modifies
procedure p1,p2;
Select p1 such that Modifies(p1,"x") and Calls(p1,p2)
Example,p
5000
6 - MultipleClauses, Typed :: Next and Calls 
procedure p; prog_line n;
Select p such that Next(n,6) and Calls(p,"q")
Example,p
5000
7 - MultipleClauses, Typed :: Next* and Next 
prog_line n1,n2; stmt s;
Select n2 such that Next(n2,n1) and Next(s,1)
none
5000
8 - MultipleClauses, Typed :: Parent and Modifies 
variable v; stmt s1;
Select v such that Parent(s1,8) and Modifies(s1,v)
y,z
5000
9 - MultipleClauses, Typed ::  
assign a; variable v; stmt s1;
Select v such that Parent(s1,8) and Modifies(s1,v) pattern a(v,_) 
y,z
5000
10 - MultipleClauses, Typed ::  
prog_line n1,n2; if i;
Select n2 with n1=i.stmt# pattern i("x",_,_) such that Next(n1,n2) 
7,8,14,20,23,24
5000
11 - MultipleClauses, Typed ::  
procedure p1,p2; variable v; while w; assign a; call c;
Select BOOLEAN pattern w("i",_) and a(_,_"z+x"_) with c.procName = p1.procName such that Uses(c,v) and Modifies(a,"d")  
false
5000
12 - MultipleClauses, Typed ::  
procedure p1,p2; variable v; while w; assign a; call c;
Select c.procName such that Uses(c,v) with c.procName = p1.procName such that Calls(p1,p2) pattern a(v,_)  
p
5000
13 - MultipleClauses, Typed ::  
procedure p1,p2; variable v; while w; assign a; call c;
Select a such that Uses(c,v) with c.procName = p1.procName such that Calls(p1,p2) pattern a(v,_)  
18,19,21,1,2,5,7,9,15,20,23,24,3,8,11,17
5000
14 - MultipleClauses, Typed ::  
constant c; variable v; if i;
Select c with i.stmt# = c.value such that Parent*(i,18)  
13
5000
15 - MultipleClauses, Typed ::  
constant c; variable v; if i;
Select c with i.stmt# = c.value such that Parent*(i,18)  
13
5000
16 - MultipleClauses, Typed ::  
prog_line n; stmt s; assign a; call c;
Select n pattern a(_,_"z*3"_) such that Follows*(a,s) with n = s.stmt# and n=c.stmt# 
16
5000
17 - MultipleClauses, Typed ::  
assign a; stmt s;
Select BOOLEAN pattern a(_,_"z*3+2*y"_) such that Follows*(s,a) 
false
5000
18 - MultipleClauses, Typed ::  
stmt s;
Select s such that Next*(s,s) and Modifies(s,"y") 
4,6,8
5000
19 - MultipleClauses, Typed ::  
prog_line n1; constant c;
Select c such that Next(7,n1) with n1 = c.value
none
5000
21 - MultipleClauses, Typed ::  
call c; procedure p;
Select p with p.procName = c.procName and c.stmt# = 12
p
5000
22 - MultipleClauses, Typed ::  
call c; procedure p;
Select BOOLEAN with p.procName = c.procName and c.stmt# = 12 such that Modifies(c,"y")
false
5000
23 - MultipleClauses, Typed ::  
calls c; procedure p;
Select p with p.procName = c.procName and c.stmt# = 10 such that Uses(p,"i")
none
5000
24 - MultipleClauses, Typed ::  
stmtLst sL1, sL2; calls c; variable v; if i;
Select sL2 such that Follows*(sL1,sL2) with c.stmt# = 16 and v.varName = "x" pattern i(v,_,_) such that Modifies(sL1,v)
none
5000
25 - MultipleClauses, Typed ::  
stmtLst sL; assign a; call c; variable v; if i;
Select a such that Follows*(sL,a) with c.stmt# = 16 and v.varName = "x" pattern i(v,_,_) such that Modifies(sL,v)
none
5000
26 - MultipleClauses, Typed ::  
prog_line n; while w; constant co;
Select n such that Next*(n,w) with co.value = w.stmt#
none
5000
27 - MultipleClauses, Typed ::  
while w; assign a; if i; variable v;
Select i pattern w(v,_) and a(v,_) and i(_,_,_) such that Uses(a,v) and Parent(i,a)
none
5000
28 - MultipleClauses, Typed ::  
while w; assign a; if i; variable v;
Select i pattern w(v,_) and a(v,_) and i(_,_,_) such that Uses(a,v) and Parent*(i,a)
13
5000
cat: All Category
1 - Multiple_Clauses, Typed :: Modifies and Uses
variable v; stmt s; procedure p;
Select p such that Modifies("Example",v) and Uses(s,v) and Modifies(s,v)
Example,p,q
5000
2 - Multiple_Clauses, Typed :: Next* and Parent*
if i; assign a;
Select a such that Parent*(i,a) and Next*(a, 20)
none
5000
3 - Multiple_Clauses, Typed :: Parent*
stmt s1, s2, s3;
Select s2 such that Parent*(s1,s2) and Parent*(s2, s3)
6,14
5000
4 - Multiple_Clauses, Typed :: Follows* and Next*
stmt s; call c;
Select BOOLEAN such that Follows*(s,c) and Next*(1,s)
true
5000
5 - Multiple_Clauses, Typed :: call and Modifies
procedure p1,p2;
Select p1 such that Modifies(p1,"x") and Calls(p1,p2)
Example,p
5000
6 - Multiple_Clauses, Typed :: Next and call 
procedure p; prog_line n;
Select p such that Next(n,6) and Calls(p,"q")
Example,p
5000
7 - Multiple_Clauses, Typed :: Next* and Next 
prog_line n1,n2; stmt s;
Select n2 such that Next(n2,n1) and Next(s,1)
none
5000
8 - Multiple_Clauses, Typed :: Parent and Modifies 
variable v; stmt s1;
Select v such that Parent(s1,8) and Modifies(s1,v)
y,z
5000
9 - Multiple_Clauses, Typed ::  
assign a; variable v; stmt s1;
Select v such that Parent(s1,8) and Modifies(s1,v) pattern a(v,_) 
z,y
5000
10 - Multiple_Clauses, Typed ::  
prog_line n1,n2; if i;
Select n2 with n1=i.stmt# pattern i("x",_,_) such that Next(n1,n2) 
7,8,14,20,23,24
5000
11 - Multiple_Clauses, Typed ::  
procedure p1,p2; variable v; while w; assign a; call c;
Select BOOLEAN pattern w("i",_) and a(_,_"z+x"_) with c.procName = p1.procName such that Uses(c,v) and Modifies(a,"d")  
false
5000
12 - Multiple_Clauses, Typed ::  
procedure p1,p2; variable v; while w; assign a; call c;
Select c.procName such that Uses(c,v) with c.procName = p1.procName such that Calls(p1,p2) pattern a(v,_)  
p
5000
13 - Multiple_Clauses, Typed ::  
procedure p1,p2; variable v; while w; assign a; call c;
Select a such that Uses(c,v) with c.procName = p1.procName such that Calls(p1,p2) pattern a(v,_)  
1,2,3,5,7,8,9,11,15,17,18,19,20,21,23,24
5000
14 - Multiple_Clauses, Typed ::  
constant c; variable v; if i;
Select c with i.stmt# = c.value such that Parent*(i,18)  
13
5000
15 - Multiple_Clauses, Typed ::  
constant c; variable v; if i;
Select c with i.stmt# = c.value such that Parent*(i,18)  
13
5000
16 - Multiple_Clauses, Typed ::  
prog_line n; stmt s; assign a; call c;
Select n pattern a(_,_"z*3"_) such that Follows*(a,s) with n = s.stmt# and n=c.stmt# 
16
5000
17 - Multiple_Clauses, Typed ::  
assign a; stmt s;
Select BOOLEAN pattern a(_,_"z*3+2*y"_) such that Follows*(s,a) 
false
5000
18 - Multiple_Clauses, Typed ::  
stmt s;
Select s such that Next*(s,s) and Modifies(s,"y") 
4,6,8
5000
19 - Multiple_Clauses, Typed ::  
prog_line n1; constant c;
Select c such that Next*(7,n1) with n1 = c.value
10
5000
22 - Multiple_Clauses, Typed ::  
call c; procedure p;
Select BOOLEAN with p.procName = c.procName and c.stmt# = 12 such that Modifies(c,"y")
false
5000
23 - Multiple_Clauses, Typed ::  
call c; procedure p;
Select p with p.procName = c.procName and c.stmt# = 10 such that Uses(p,"i")
none
5000
24 - Multiple_Clauses, Typed ::  
stmtLst sL1, sL2; call c; variable v; if i; stmt s1,s2;
Select sL2 such that Follows*(s1,s2) with c.stmt# = 16 and v.varName = "x" pattern i(v,_,_) such that Modifies(s1,v)
1,13,14,15,20,22,23,24,5,7,8
5000
25 - Multiple_Clauses, Typed ::  
stmt s; assign a; call c; variable v; if i;
Select a such that Follows*(s,a) with c.stmt# = 16 and v.varName = "x" pattern i(v,_,_) such that Modifies(s,v)
2,3,9,11,17,18,19,21
5000
26 - Multiple_Clauses, Typed ::  
prog_line n; while w; constant co;
Select n such that Next*(n,w) with co.value = w.stmt#
none
5000
27 - Multiple_Clauses, Typed ::  
while w; assign a; if i; variable v;
Select i pattern w(v,_) and a(v,_) and i(_,_,_) such that Uses(a,v) and Parent(i,a)
none
5000
28 - Multiple_Clauses, Typed ::  
while w; assign a; if i; variable v;
Select i pattern w(v,_) and a(v,_) and i(_,_,_) such that Uses(a,v) and Parent*(i,a)
13
5000
cat: Tuple Results
1 - MultipleClauses, Typed :: Modifies and Uses
variable v; stmt s;
Select <s,v> such that Modifies("Example",v) and Uses(s,v) and Modifies(s,v)
4 i, 4 x, 4 z, 5 x, 6 z, 9 z, 10 z, 10 x, 11 i, 12 x, 12 i, 12 z, 13 x, 13 i, 13 z, 14 i, 14 x, 14 z, 16 x, 16 z, 17 i, 18 x, 19 z, 21 z, 22 x, 22 z, 24 x
5000
2 - MultipleClauses, Typed :: Next* and Parent*
if i; assign a;
Select <i,a> such that Parent*(i,a) and Next*(a, 20)
none
5000
3 - MultipleClauses, Typed :: Parent*
stmt s1, s2, s3;
Select <s1,s2> such that Parent*(s1,s2) and Parent*(s2, s3)
4 6, 13 14
5000
4 - MultipleClauses, Typed :: Calls and Modifies
procedure p1,p2; variable v;
Select <p1,v> such that Modifies(p1,"x") and Calls(p1,p2)
Example x, Example y, Example i, Example z, p x, p y, p i, p z
5000
5 - MultipleClauses, Typed :: Calls and Modifies
procedure p1,p2;
Select <p1,p2> such that Modifies(p1,"x") and Calls(p1,p2)
Example p, Example q, p q
5000
6 - MultipleClauses, Typed :: Next and Calls 
procedure p; prog_line n;
Select <n,p> such that Next(n,6) and Calls(p,"q")
5 Example, 5 p
5000
7 - MultipleClauses, Typed :: Next and Calls 
procedure p; prog_line n; if i;
Select <n,i> such that Next(n,6) and Calls(p,"q")
5 6, 5 13, 5 22
5000
8 - MultipleClauses, Typed :: Next* and Next 
prog_line n1,n2; stmt s;
Select <n1,n2> such that Next(n2,n1) and Next(s,1)
none
5000
9 - MultipleClauses, Typed :: Parent and Modifies 
variable v; stmt s1;
Select <v, s1> such that Parent(s1,8) and Modifies(s1,v)
y 6, z 6
5000
10 - MultipleClauses, Typed :: Parent and Modifies 
variable v; stmt s1;
Select <s1, v> such that Parent*(s1,8) and Modifies(s1,v)
4 i, 4 x, 4 y, 4 z, 6 y, 6 z
5000
11 - MultipleClauses, Typed ::  
assign a; variable v; stmt s1;
Select <a, s1, v> such that Parent(s1,8) and Modifies(s1,v) pattern a(v,_) 
2 6 z, 7 6 z, 8 6 y, 9 6 z, 19 6 z, 20 6 z, 21 6 z, 23 6 z
5000
12 - MultipleClauses, Typed ::  
procedure p1; variable v; while w; assign a; call c;
Select <a,c> pattern w("i",_) and a(_,_"z+x"_) such that Uses(c,v) and Modifies(a,v)  
8 12, 9 10, 9 12, 9 16, 21 10, 21 12, 21 16, 24 10, 24 12, 24 16
5000
13 - MultipleClauses, Typed ::  
procedure p1; variable v; while w; assign a; call c;
Select <a,c,v> pattern w("i",_) and a(_,_"z+x"_) such that Uses(c,v) and Modifies(a,v)  
8 12 y, 9 10 z, 9 12 z, 9 16 z, 21 10 z, 21 12 z, 21 16 z, 24 10 x, 24 12 x, 24 16 x
5000